name: Publish Mouseless App
 
on:
 
  push:
 
    tags:
 
      - 'v*'
 
    branches: '*'
 
  workflow_dispatch:
 

 
env:
 
  APP_NAME: "mouseless"

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt update
          # Add Jammy repository for libwebkit2gtk-4.0-dev
          echo "deb http://gb.archive.ubuntu.com/ubuntu jammy main" | sudo tee -a /etc/apt/sources.list.d/jammy-packages.list
          sudo apt update
          sudo apt install -y libgtk-3-dev librsvg2-dev patchelf libx11-dev libxdo-dev
          # Install libwebkit2gtk-4.0-dev from Jammy repository
          sudo apt install -y libwebkit2gtk-4.1.so libappindicator3-dev

      - name: Install frontend dependencies
        run: npm install

      # CI Builds for pull requests and branch pushes
      - name: CI Build
        if: ${{ github.ref_type == 'branch' }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          npm run build
          cd src-tauri && cargo tauri build ${{ matrix.target != '' && format('--target {0}', matrix.target) || '' }}

      # Upload Windows CI build artifacts
      - name: Upload Windows artifacts
        if: ${{ github.ref_type == 'branch' && matrix.platform == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.name }}-ci-build
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
          retention-days: 7

      # Upload macOS CI build artifacts
      - name: Upload macOS artifacts
        if: ${{ github.ref_type == 'branch' && matrix.platform == 'macos-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.name }}-ci-build
          path: |
            src-tauri/target/${{ matrix.target != '' && format('{0}/', matrix.target) || '' }}release/bundle/dmg/*.dmg
          retention-days: 7

      # Upload Linux CI build artifacts
      - name: Upload Linux artifacts
        if: ${{ github.ref_type == 'branch' && matrix.platform == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.name }}-ci-build
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
          retention-days: 7

      # Create GitHub release for tags
      - name: Build Tauri app for release
        uses: tauri-apps/tauri-action@v0
        if: ${{ github.ref_type == 'tag' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
